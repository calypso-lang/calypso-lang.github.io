initSidebarItems({"constant":[["BUG_REPORT_URL",""]],"derive":[["StructOpt","Generates the `StructOpt` impl."]],"enum":[["CalError","The Calypso error type."],["DiagnosticError","An extension of [`CalError`] used for diagnostics."],["LabelStyle",""]],"fn":[["init_panic_hook",""],["main",""],["report_ice",""]],"macro":[["err","Format a diagnostic short message based on its registerred format string."],["panic","Panics the current thread."]],"mod":[["buildinfo",""],["cli",""],["commands",""],["diagnostic","Diagnostics and builders to create them."],["panic","Panic support in the standard library."]],"static":[["DEFAULT_HOOK",""],["GLOBAL",""]],"struct":[["Arc","A thread-safe reference-counting pointer. ‘Arc’ stands for ‘Atomically Reference Counted’."],["Emitters","A helper struct containing the emitters for stdout and stderr."],["EnsembleBuilder","A builder for an ensemble diagnostic."],["EnvFilter","A [`Layer`] which filters spans and events based on a set of filter directives."],["GlobalCtxt","The global context of the Calypso compiler. Usually held in a [`std::sync::Arc`]."],["GlobalReportingCtxt","The global reporting context for diagnostics."],["MiMalloc","Drop-in mimalloc global allocator."],["OnceCell","A thread-safe cell which can be written to only once."]],"trait":[["Files","A minimal interface for accessing source files when rendering diagnostics."],["StructOpt","A struct that is converted from command line arguments."]],"type":[["CalResult","A handy alias for [`Result<T, CalError>`], genericized over `T`."],["RwLock","A reader-writer lock"],["SourceMgr","The structure used for managing source file names, IDs, and contents."]]});