var searchIndex = JSON.parse('{\
"calypso":{"doc":"","t":[17,7,7,0,0,5,5,5,7,3,11,11,12,12,12,11,11,5,11,11,12,12,11,12,12,12,12,12,12,11,11,11,11,12,0,0,5,5,5,5,5,5],"n":["BUG_REPORT_URL","DEFAULT_HOOK","GLOBAL","buildinfo","commands","init_panic_hook","main","report_ice","BUILD_INFO","BuildInfo","borrow","borrow_mut","cargo_features","cargo_profile","cargo_target_triple","clone","clone_into","construct_buildinfo","fmt","from","git_branch","git_commit","into","rustc_channel","rustc_commit_date","rustc_commit_hash","rustc_host_triple","rustc_llvm_version","rustc_version","to_owned","try_from","try_into","type_id","version","explain","internal","explain","buildinfo","internal","lexer","lexer_stdin","lexer_stdin_repl"],"q":["calypso","","","","","","","","calypso::buildinfo","","","","","","","","","","","","","","","","","","","","","","","","","","calypso::commands","","calypso::commands::explain","calypso::commands::internal","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,[[["arc",3],["basesession",3]]],[[]],[[["panicinfo",3],["basesession",3],["str",15]]],null,null,[[]],[[]],null,null,null,[[],["buildinfo",3]],[[]],[[],["buildinfo",3]],[[["formatter",3]],["result",6]],[[]],null,null,[[]],null,null,null,null,null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[["arc",3],["basesession",3],["argmatches",3]]],[[["arc",3],["basesession",3]]],[[["arc",3],["basesession",3],["argmatches",3]]],[[["arc",3],["basesession",3],["argmatches",3]]],[[["arc",3],["basesession",3],["argmatches",3]]],[[["arc",3],["basesession",3],["bool",15]]]],"p":[[3,"BuildInfo"]]},\
"calypso_ast":{"doc":"","t":[0,0,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,4,13,13,4,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,11,11],"n":["expr","visitor","Add","Atom","AtomStr","BinOp","BinOpKind","Binary","BitAnd","BitOr","BitShiftLeft","BitShiftRight","BitXor","Bool","Decimal","Divide","Equal","Exponent","Expr","Float","Gt","GtEq","Hexadecimal","Invalid","LogicalAnd","LogicalOr","Lt","LtEq","Modulo","Multiply","Negative","NotEqual","Number","Octal","Primary","Primary","Radix","Sint","Subtract","Suffix","Uint","UnOp","UnOpKind","UnaryNot","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","detuple_number","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","into","into","into","into","into","into","ne","ne","radix","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Visitor","visit_expr","visit_primary"],"q":["calypso_ast","","calypso_ast::expr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calypso_ast::visitor","",""],"d":["","","","","","","","<code>0b</code>","","","","","","","No prefix or <code>0d</code>","","","","","<code>f</code>","","","<code>0x</code>","Invalid suffix","","","","","","","","","","<code>0o</code>","","","Number radixes.","<code>s</code>","","Number suffixes.","<code>u</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","Implementation detail.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,2,2,3,0,4,1,1,1,1,1,2,4,1,1,1,0,5,1,1,4,5,1,1,1,1,1,1,6,1,2,4,0,3,0,5,1,0,5,3,0,6,3,1,6,2,4,5,3,1,6,2,4,5,3,1,6,2,4,5,3,1,6,2,4,5,2,3,1,6,2,4,5,3,1,6,2,4,5,3,1,6,2,4,5,1,6,4,5,1,6,4,5,3,1,6,2,4,5,3,2,4,3,1,6,2,4,5,3,1,6,2,4,5,3,1,6,2,4,5,3,1,6,2,4,5,0,7,7],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["expr",4]],[[],["binopkind",4]],[[],["unopkind",4]],[[],["primary",4]],[[],["radix",4]],[[],["suffix",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["expr",4]],["bool",15]],[[["binopkind",4]],["bool",15]],[[["unopkind",4]],["bool",15]],[[["primary",4]],["bool",15]],[[["radix",4]],["bool",15]],[[["suffix",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["expr",4]],["bool",15]],[[["primary",4]],["bool",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[["rc",3],["refcell",3]],["calresult",6]],[[["rc",3],["refcell",3]],["calresult",6]]],"p":[[4,"BinOpKind"],[4,"Primary"],[4,"Expr"],[4,"Radix"],[4,"Suffix"],[4,"UnOpKind"],[8,"Visitor"]]},\
"calypso_base":{"doc":"Base types and utilities for Calypso that don’t require …","t":[0,0,0,0,0,3,11,11,11,11,11,12,12,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,8,3,3,12,12,0,11,11,12,10,12,11,11,12,12,10,12,12,10,12,12,11,11,10,12,12,11,11,11,11,10,12,12,11,11,0,12,3,11,11,12,11,11,11,11,11,12,11,11,12,11,12,11,12,11,12,11,12,11,11,11,11,3,11,11,12,11,11,11,11,11,12,11,11,11,11,11,12,11,12,11,12,11,12,11,12,11,11,12,11,11,11,11,12,7,13,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,3,13,4,3,13,3,13,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5],"n":["session","span","streams","symbol","ui","BaseSession","borrow","borrow_mut","from","into","new","stderr","stdout","try_from","try_into","type_id","Span","Spanned","add_hi","add_lo","between","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","contains","default","eq","eq","eq","fmt","fmt","from","from","from","from","from","get_hash","get_hash","hash","hash","hi","hi","into","into","is_dummy","is_empty","len","lo","lo","ne","ne","new","new","new_dummy","new_shrunk","overlaps","partial_cmp","shrink_to_hi","shrink_to_lo","span","span","sub_hi","sub_lo","substitute_dummy","to","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","until","value","value","value_owned","with_hi","with_lo","Stream","Streamed","StringStream","chars_passed","elements","generic","gorge_while","gorge_while_eq","indices","is_at_end","iter","next_if","next_if_eq","num_chars","num_passed","peek","peek","peek","peek2","peek2","peek2","peek2_cond","peek2_eq","peek3","peek3","peek3","peek3_cond","peek3_eq","peek_cond","peek_eq","prev","prev","prev","prev_cond","prev_eq","str","string","Streamed","borrow","borrow_mut","elements","from","index","into","into_iter","is_at_end","iter","new","next","num_passed","peek","peek","peek2","peek2","peek3","peek3","prev","prev","size_hint","try_from","try_into","type_id","StringStream","borrow","borrow_mut","chars_passed","clone","clone_into","fmt","from","index","indices","into","into_iter","is_at_end","new","next","num_chars","peek","peek","peek2","peek2","peek3","peek3","prev","prev","size_hint","slice","string","to_owned","try_from","try_into","type_id","0","GLOBAL_INTERNER","Interned","PotentiallyInterned","Symbol","Uninterned","as_ref","as_str","as_u32","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","get_hash","get_interner","hash","intern","intern_static","intern_static_2","into","into","is_empty","is_keyword","kw","ne","ne","potentially_intern","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","EMPTY","Empty","FALSE","False","Keyword","TRUE","True","UNDERSCORE","Under","__private_field","__private_field","__private_field","__private_field","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref","eq","eq","eq","eq","eq","fmt","from","from","from","from","from","from","init","initialize","initialize","initialize","initialize","into","into","into","into","into","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","error","error_to","info","info_to","message_general","note","note_to","parse_color_pref","warn","warn_to"],"q":["calypso_base","","","","","calypso_base::session","","","","","","","","","","","calypso_base::span","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calypso_base::streams","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calypso_base::streams::generic","","","","","","","","","","","","","","","","","","","","","","","","","calypso_base::streams::str","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calypso_base::symbol","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calypso_base::symbol::kw","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calypso_base::ui","","","","","","","","",""],"d":["The base session type","<code>Span</code> and <code>Spanned</code> types.","Utilities for handling streams of data","Utilities for interned strings (symbols)","User interface utilities (i.e. color)","","","","","","","","","","","","The location in a slice in which some object spans.","An object that’s associated with a <code>Span</code>","","","Returns a <code>Span</code> between the end of <code>self</code> to the beginning …","","","","","","","","","","Returns <code>true</code> if <code>self</code> fully encloses <code>other</code>.","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if this is a dummy span","Returns true if if <code>hi == lo</code>","","","","","","","Associate a span with a value.","Create a dummy span (that has a span equivalent to the …","","Returns <code>true</code> if <code>self</code> touches <code>other</code>.","","Returns a new span representing an empty span at the end …","Returns a new span representing an empty span at the …","Get the value’s <code>Span</code>","","","","Returns <code>self</code> if <code>self</code> is not a dummy span, and <code>other</code> …","Returns a <code>Span</code> that would enclose both <code>self</code> and <code>end</code>.","","","","","","","","","Returns a <code>Span</code> from the beginning of <code>self</code> until the …","Get a reference to the value.","","Get the owned value.","","","A trait for streamed data. For a stream, <code>EOF</code> means either …","A generic stream.","A stream emitting tuples of byte locations and characters …","The number of characters passed so far.","A reference to the underlying slice","Generic streams","Keep consuming elements while the condition is true and …","Keep consuming elements while the element is equal to …","The stream’s current char and index","This stream can no longer produce elements if this …","The stream’s current char and index","Consume the next element if the condition is true.","Consume the next element if it is equal to <code>expected</code>.","The cached number of characters in the string, as …","The number of elements passed so far.","Peek at the value one element ahead, without consuming it.","1elem peek","1ch peek","Peek at the value two element ahead, without consuming …","2elem peek","2ch peek","Returns the value of the condition, wrapped in an <code>Option</code>. …","Returns <code>Some(true)</code> if the value two elements ahead is …","Peek at the value three element ahead, without consuming …","3elem peek","3ch peek","Returns the value of the condition, wrapped in an <code>Option</code>. …","Returns <code>Some(true)</code> if the value three elements ahead is …","Returns the value of the condition, wrapped in an <code>Option</code>. …","Returns <code>Some(true)</code> if the value one element ahead is …","Peek at the value one element behind, without moving …","1elem backwards peek","1ch backwards peek","Returns the value of the condition, wrapped in an <code>Option</code>. …","Returns <code>Some(true)</code> if the value one element behind is …","String streams","A reference to the underlying string","A generic stream.","","","A reference to the underlying slice","","","","","","The stream’s current char and index","","","The number of elements passed so far.","","1elem peek","","2elem peek","","3elem peek","","1elem backwards peek","","","","","A stream emitting tuples of byte locations and characters …","","","The number of characters passed so far.","","","","","","The stream’s current char and index","","","","","","The cached number of characters in the string, as …","","1ch peek","","2ch peek","","3ch peek","","1ch backwards peek","","","A reference to the underlying string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a color preference (<code>always</code>, <code>ansi</code>, <code>auto</code>, anything …","",""],"i":[0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,2,2,2,2,3,2,3,2,3,2,3,2,2,2,2,3,3,2,3,2,2,3,3,3,2,3,2,3,2,2,2,3,2,2,2,2,2,2,3,2,3,2,2,2,2,2,2,3,3,2,2,2,2,2,3,2,3,2,3,2,3,2,3,3,3,2,2,0,0,0,4,5,0,6,6,4,6,5,6,6,4,5,6,5,4,6,5,4,6,6,6,5,4,6,6,6,6,6,5,4,6,6,0,4,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,7,0,8,0,0,8,8,7,7,7,8,7,8,7,8,7,8,7,7,7,7,7,8,7,7,8,8,7,7,8,7,0,7,7,7,7,7,8,7,7,0,7,8,8,7,8,7,8,7,8,7,8,7,8,0,9,0,9,0,0,9,0,9,10,11,12,13,10,11,12,13,9,10,11,12,13,9,9,9,10,11,12,13,10,11,12,13,9,9,10,11,12,13,9,9,0,10,11,12,13,10,11,12,13,9,9,10,11,12,13,9,10,11,12,13,9,10,11,12,13,9,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["colorchoice",4]]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[["usize",15]],["span",3]],[[["usize",15]],["span",3]],[[["span",3]],["span",3]],[[]],[[]],[[]],[[]],[[],["span",3]],[[],["spanned",3]],[[]],[[]],[[["span",3]],["ordering",4]],[[["span",3]],["bool",15]],[[]],[[["span",3]],["bool",15]],[[],["bool",15]],[[["spanned",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["range",3],["usize",15]]],[[]],[[],[["spanned",3],["char",15]]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[],["usize",15]],null,[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],null,[[["span",3]],["bool",15]],[[["spanned",3]],["bool",15]],[[["usize",15]]],[[["span",3]]],[[]],[[["usize",15]]],[[["span",3]],["bool",15]],[[["span",3]],[["option",4],["ordering",4]]],[[],["span",3]],[[],["span",3]],[[],["span",3]],null,[[["usize",15]],["span",3]],[[["usize",15]],["span",3]],[[["span",3]],["span",3]],[[["span",3]],["span",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["span",3]],["span",3]],[[]],null,[[]],[[["usize",15]]],[[["usize",15]]],null,null,null,null,null,null,[[],["usize",15]],[[],["usize",15]],null,[[],["bool",15]],null,[[],["option",4]],[[],["option",4]],null,null,[[],["option",4]],null,null,[[],["option",4]],null,null,[[],[["bool",15],["option",4]]],[[],[["bool",15],["option",4]]],[[],["option",4]],null,null,[[],[["bool",15],["option",4]]],[[],[["bool",15],["option",4]]],[[],[["bool",15],["option",4]]],[[],[["bool",15],["option",4]]],[[],["option",4]],null,null,[[],[["bool",15],["option",4]]],[[],[["bool",15],["option",4]]],null,null,null,[[]],[[]],null,[[]],[[]],[[]],[[]],[[],["bool",15]],null,[[]],[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],null,[[],["stringstream",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],null,[[]],[[]],[[],["bool",15]],[[["str",15]]],[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[]],[[],["str",15]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,[[],["str",15]],[[],["str",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[],["symbol",3]],[[],["potentiallyinterned",4]],[[]],[[]],[[["empty",3]],["bool",15]],[[["true",3]],["bool",15]],[[["symbol",3]],["bool",15]],[[["false",3]],["bool",15]],[[["underscore",3]],["bool",15]],[[["potentiallyinterned",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["keyword",4]]],[[]],[[],["u64",15]],[[],["threadedrodeo",3]],[[]],[[["str",15]]],[[["str",15]]],[[["str",15]]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],null,[[["symbol",3]],["bool",15]],[[["potentiallyinterned",4]],["bool",15]],[[["str",15]]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["keyword",4]],[[]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[["empty",3]],["bool",15]],[[["underscore",3]],["bool",15]],[[["true",3]],["bool",15]],[[["false",3]],["bool",15]],[[["keyword",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["symbol",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["option",4],["buffer",3],["str",15]],["calresult",6]],[[["bufferwriter",3],["option",4],["str",15]],["calresult",6]],[[["option",4],["buffer",3],["str",15]],["calresult",6]],[[["bufferwriter",3],["option",4],["str",15]],["calresult",6]],[[["str",15],["option",4],["buffer",3],["color",4],["str",15]],["calresult",6]],[[["option",4],["buffer",3],["str",15]],["calresult",6]],[[["bufferwriter",3],["option",4],["str",15]],["calresult",6]],[[["stream",4],["str",15]],["colorchoice",4]],[[["option",4],["buffer",3],["str",15]],["calresult",6]],[[["bufferwriter",3],["option",4],["str",15]],["calresult",6]]],"p":[[3,"BaseSession"],[3,"Span"],[3,"Spanned"],[3,"StringStream"],[3,"Streamed"],[8,"Stream"],[3,"Symbol"],[4,"PotentiallyInterned"],[4,"Keyword"],[3,"EMPTY"],[3,"UNDERSCORE"],[3,"TRUE"],[3,"FALSE"]]},\
"calypso_diagnostic":{"doc":"","t":[6,0,0,14,0,0,0,12,12,12,13,3,3,13,13,4,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,4,6,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,12,11,11,11,11,12,11,11,11,12,11,11,11,3,12,11,11,11,11,11,11,11,11,11],"n":["FileMgr","diagnostic","error","gen_error","prelude","report","types","0","1","2","Bug","Builder","Diagnostic","Error","Help","LabelStyle","Note","Primary","Secondary","Severity","Warning","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","code","code","code","eq","files","fmt","fmt","fmt","from","from","from","get_hash","hash","into","into","into","label","labels","level","message","message","new","note","notes","partial_cmp","reason","rendered","sess","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Diagnostic","DiagnosticError","Rendering","borrow","borrow_mut","fmt","fmt","from","from","from","into","source","to_string","try_from","try_into","type_id","CalError","CalResult","FromUtf8","Io","LabelStyle","Other","Primary","Secondary","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","fmt","fmt","from","from","from","from","from","from","into","into","partial_cmp","source","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","GlobalReportingCtxt","borrow","borrow_mut","errors","errors","from","into","new","nonfatals","nonfatals","report_non_fatal","report_syncd","sess","sess","try_from","try_into","type_id","DIAGNOSTICS","__private_field","borrow","borrow_mut","deref","from","initialize","into","try_from","try_into","type_id"],"q":["calypso_diagnostic","","","","","","","calypso_diagnostic::diagnostic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calypso_diagnostic::error","","","","","","","","","","","","","","","","calypso_diagnostic::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calypso_diagnostic::report","","","","","","","","","","","","","","","","","calypso_diagnostic::types","","","","","","","","","",""],"d":["","","","Generate errors or report synchronized errors.","","","","","","","An unexpected bug.","","","An error.","A help message.","","A note.","Labels that describe the primary cause of a diagnostic.","Labels that provide additional context for a diagnostic.","A severity level for diagnostic messages.","A warning.","","","","","","","Build the diagnostic. This pre-renders the diagnostic.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An extension of [<code>CalError</code>] used for diagnostics.","","","","","","","","","","","","","","","The Calypso error type.","A handy alias for [<code>Result<T, CalError></code>], genericized over …","UTF-8 decoding errors","IO errors","","Any other error, using [<code>anyhow</code>]","Labels that describe the primary cause of a diagnostic.","Labels that provide additional context for a diagnostic.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,1,1,2,0,0,2,2,0,2,3,3,0,2,1,4,2,1,4,2,4,4,2,4,2,1,4,4,2,4,1,1,2,1,4,2,2,2,1,4,2,4,4,4,4,4,4,4,4,2,1,1,4,4,2,1,1,4,2,1,4,2,1,4,2,5,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,6,6,0,6,3,3,6,3,6,3,3,3,3,6,6,3,6,6,6,6,6,3,6,3,3,6,3,6,6,3,6,3,6,3,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,8,8,8,8,8,8,8,8,8,8],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],[["calresult",6],["diagnostic",3]]],[[],["builder",3]],[[],["severity",4]],[[]],[[]],[[],[["option",4],["str",15]]],[[]],null,[[["severity",4]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[["labelstyle",4],["usize",15],["span",3]]],null,null,[[]],null,[[["basesession",3],["filemgr",6],["severity",4],["arc",3]]],[[]],null,[[["severity",4]],[["option",4],["ordering",4]]],[[],["str",15]],[[],["buffer",3]],null,[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["diagrendererror",4]]],[[]],[[["diagnostic",3]]],[[]],[[],[["option",4],["error",8]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["labelstyle",4]],[[]],[[["labelstyle",4]],["bool",15]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["error",3]],["calerror",4]],[[["diagnosticerror",4]]],[[]],[[["error",3]],["calerror",4]],[[["fromutf8error",3]],["calerror",4]],[[]],[[]],[[]],[[["labelstyle",4]],[["option",4],["ordering",4]]],[[],[["option",4],["error",8]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],null,[[]],[[]],[[["arc",3],["basesession",3]]],[[]],null,[[["diagnostic",3]]],[[["diagnostic",3]]],[[],["arc",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],[[]],[[],["hashmap",3]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Diagnostic"],[4,"Severity"],[4,"LabelStyle"],[3,"Builder"],[4,"DiagnosticError"],[4,"CalError"],[3,"GlobalReportingCtxt"],[3,"DIAGNOSTICS"]]},\
"calypso_error":{"doc":"Error-handling utilities and types for use in Calypso.","t":[4,6,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CalError","CalResult","FromUtf8","Io","Other","borrow","borrow_mut","fmt","fmt","from","from","from","from","into","source","to_string","try_from","try_into","type_id"],"q":["calypso_error","","","","","","","","","","","","","","","","","",""],"d":["The Calypso error type.","A handy alias for [<code>Result<T, CalError></code>], genericized over …","UTF-8 decoding errors","IO errors","Any other error, using [<code>anyhow</code>]","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,null,null,[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["error",3]]],[[["fromutf8error",3]]],[[["error",3]]],[[]],[[],[["error",8],["option",4]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"CalError"]]},\
"calypso_filety":{"doc":"<code>calypso_filety</code>","t":[0,0,0,3,3,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,12,11,11,12,11,12,11,11,11,11,11,11,11,11,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,11,11,12,11,11,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11],"n":["ccff","hl","ll","ContainerFile","Section","abi","abi","add_section","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","data","decode","decode","default","default","encode","encode","eq","eq","filety","filety","flags","flags","fmt","fmt","from","from","get_abi","get_data","get_data_mut","get_filety","get_flags","get_name","get_offset","get_section","get_section_mut","get_stype","into","into","name","ne","ne","new","new","offset","read_all","read_data","remove_section","sections","sections","sections_mut","seek_to_data","size","stype","stype","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","CcffHeader","CcffSectionHeader","abi","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deserialize","deserialize","eq","eq","filety","flags","fmt","fmt","from","from","into","into","magic","name","ne","ne","offset","read","read_data","section_type","sections","seek_to_data","serialize","serialize","size","size","size","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write"],"q":["calypso_filety","calypso_filety::ccff","","calypso_filety::ccff::hl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calypso_filety::ccff::ll","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Calypso Container File Format. See the module-level docs …","A high-level interface for CCFF files","Low-level (binary representation with bincode) for CCFF …","A higher-level interface to a CCFF container file.","A higher-level interface to a CCFF section.","Set the ABI of the container file. This can be any …","","Add a section to the container file.","","","","","","","","","Set the data of the section. This can be any arbitrary …","","Decode the container file from its low-level counterpart.","Decode a section from its lower-level counterpart.","","","Encode the container file as its low-level counterpart. …","Encode the section as its low-level counterpart. This …","","","Set the file type of the container file. This can be any …","","Set the flags of the section. This can be any arbitrary …","","","","","","Get the ABI of the container file.","Get a reference to the data of the section. This may not …","Get a mutable reference to the data of the section. This …","Get the file type of the container file.","Get the flags of the section.","Get the name of the section.","Get the offset of the data. This is only present if …","Get a reference to a section in the container file.","Get a mutable reference to a section in the container …","Get the type of the section.","","","","","","Create a new container file. The ABI and file type (<code>filety</code>…","Create a section. The section type (<code>stype</code>) or flags can …","","Read the entirety of the container file’s section data. …","Read the entirety of the section’s data. It is not …","Remove a section from the container file. Does nothing if …","Iterate over the sections in the container file.","","Iterate mutably over the sections in the container file.","Seek to the location of the data in the reader.","","Set the type of the section. This can be any arbitrary …","","","","","","","","","","The header for a CCFF file","The header for a CCFF section. This does not include the …","A user-defined ABI version.","","","","","","","","","","","","","A user-defined file type.","User-defined section flags.","","","","","","","The 2 magic bytes","The section name, encoded as a length-string (i.e. a …","","","The offset, in bytes, of the section from the begining of …","Read the CCFF header and magic bytes.","Read the entirety of the data. This function assumes that …","A user-defined section type.","The CCFF section headers, encoded as a length-array (i.e. …","Seek to the data.","","","Get the size of the CCFF header, including the magic …","Get the size of this header as it would be encoded.","The size, in bytes, of this section","","","","","","","","","Write the CCFF header and magic bytes."],"i":[0,0,0,0,0,1,1,1,1,2,1,2,1,2,1,2,2,2,1,2,1,2,1,2,1,2,1,1,2,2,1,2,1,2,1,2,2,1,2,2,2,1,1,2,1,2,2,1,2,1,2,2,1,2,1,1,1,1,2,2,2,2,1,2,1,2,1,2,1,2,0,0,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,4,3,4,4,3,4,3,4,3,4,4,3,4,3,4,3,4,3,4,3],"f":[null,null,null,null,null,[[["u64",15]]],null,[[["section",3]]],[[]],[[]],[[]],[[]],[[],["containerfile",3]],[[],["section",3]],[[]],[[]],[[["u8",15],["vec",3]]],null,[[["ccffheader",3]]],[[["ccffsectionheader",3]]],[[],["containerfile",3]],[[],["section",3]],[[]],[[]],[[["containerfile",3]],["bool",15]],[[["section",3]],["bool",15]],[[["u64",15]]],null,[[["u64",15]]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["u64",15]],[[],["option",4]],[[],[["vec",3],["option",4]]],[[],["u64",15]],[[],["u64",15]],[[],["str",15]],[[],[["option",4],["u64",15]]],[[["str",15]],[["option",4],["section",3]]],[[["str",15]],[["section",3],["option",4]]],[[],["u64",15]],[[]],[[]],null,[[["containerfile",3]],["bool",15]],[[["section",3]],["bool",15]],[[["u64",15]]],[[["string",3],["u64",15]]],null,[[],["calresult",6]],[[],["calresult",6]],[[["str",15]]],[[]],null,[[]],[[],["calresult",6]],null,[[["u64",15]]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[],["ccffheader",3]],[[],["ccffsectionheader",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["ccffheader",3]],["bool",15]],[[["ccffsectionheader",3]],["bool",15]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,null,[[["ccffheader",3]],["bool",15]],[[["ccffsectionheader",3]],["bool",15]],null,[[],["calresult",6]],[[],[["calresult",6],["vec",3]]],null,null,[[],["calresult",6]],[[],["result",4]],[[],["result",4]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["calresult",6]]],"p":[[3,"ContainerFile"],[3,"Section"],[3,"CcffHeader"],[3,"CcffSectionHeader"]]},\
"calypso_parsing":{"doc":"","t":[0,0,0,3,6,3,6,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,12,0,11,11,11,11,11,0,0,11,11,12,12,12,11,11,11,11,11,11,0,0,7,5,5,5,5,5,5,5,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,0,0,0,3,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,12,10,3,13,13,13,13,13,13,13,13,17,17,3,4,5,5,5,12,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,4,13,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,3,11,11,12,12,11,11,0,11,11,11,11,11],"n":["lexer","parser","pretty","Iter","Lexeme","Lexer","Token","borrow","borrow","borrow_mut","borrow_mut","current","current_to_start","deref","deref_mut","encountered_eof","encountered_error","files","from","from","gorge_digits","gorge_digits_radix","grcx","handle_char_literal","handle_comment","handle_dangling_comment_ends","handle_escape_character","handle_float_part","handle_hex_escape","handle_identifier","handle_int","handle_int_leading_zero","handle_multiline_comment","handle_number","handle_string_literal","handle_suffix","handle_unexpected_underscore","handle_unicode_escape","handle_unicode_escape_internal","handle_whitespace","helpers","ident_kw","into","into","into_iter","into_iter","inval_float_decimal","inval_float_exponent","lexer","lit","new","new_span","new_token","new_token_with_span","next","num","scan","scan","set_start","source_id","start","stream","try_from","try_from","try_into","try_into","type_id","type_id","types","ws","WHITESPACE","is_ident_continue","is_ident_end","is_ident_start","is_valid_for","is_valid_for_char_literal","is_whitespace","is_whitespace_ch","And","AndAnd","Bang","BangEq","BlockComment","Caret","Char","Colon","Eof","EqEq","Float","Gt","GtEq","GtGt","Ident","Int","Keyword","LParen","LineComment","Lt","LtEq","LtLt","Minus","Percent","Pipe","PipePipe","Plus","RParen","Slash","Star","StarStar","String","TokenType","Under","Unexpected","Ws","borrow","borrow_mut","clone","clone_into","eq","fmt","from","get_hash","hash","into","ne","to_owned","try_from","try_into","type_id","doc","doc","inner","inner","nest_level","radix","suffix","expr","grammar","tokens","ExprParser","__ToTriple","__action0","__action1","__action10","__action11","__action12","__action13","__action14","__action15","__action16","__action17","__action18","__action19","__action2","__action20","__action21","__action22","__action23","__action24","__action25","__action26","__action27","__action28","__action29","__action3","__action30","__action31","__action32","__action33","__action34","__action35","__action36","__action37","__action38","__action39","__action4","__action40","__action41","__action42","__action43","__action44","__action45","__action46","__action47","__action48","__action49","__action5","__action50","__action51","__action52","__action53","__action54","__action55","__action56","__action57","__action58","__action59","__action6","__action60","__action61","__action62","__action63","__action64","__action65","__action66","__action67","__action68","__action69","__action7","__action70","__action71","__action72","__action73","__action74","__action8","__action9","__parse__Expr","_priv","to_triple","ExprParser","Variant0","Variant1","Variant2","Variant3","Variant4","Variant5","Variant6","Variant7","__ACTION","__EOF_ACTION","__StateMachine","__Symbol","__action","__expected_tokens","__goto","__phantom","__pop_Variant0","__pop_Variant1","__pop_Variant2","__pop_Variant3","__pop_Variant4","__pop_Variant5","__pop_Variant6","__pop_Variant7","__reduce","__reduce0","__reduce1","__reduce10","__reduce11","__reduce12","__reduce13","__reduce14","__reduce15","__reduce16","__reduce17","__reduce18","__reduce19","__reduce2","__reduce20","__reduce21","__reduce22","__reduce23","__reduce24","__reduce25","__reduce26","__reduce27","__reduce28","__reduce29","__reduce3","__reduce30","__reduce31","__reduce32","__reduce33","__reduce34","__reduce35","__reduce36","__reduce37","__reduce38","__reduce39","__reduce4","__reduce40","__reduce41","__reduce42","__reduce43","__reduce44","__reduce45","__reduce46","__reduce47","__reduce48","__reduce49","__reduce5","__reduce50","__reduce51","__reduce52","__reduce53","__reduce54","__reduce55","__reduce56","__reduce57","__reduce58","__reduce59","__reduce6","__reduce60","__reduce61","__reduce62","__reduce63","__reduce64","__reduce65","__reduce66","__reduce67","__reduce68","__reduce69","__reduce7","__reduce8","__reduce9","__symbol_type_mismatch","__token_to_integer","__token_to_symbol","_priv","action","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","eof_action","error_action","error_recovery_symbol","expected_tokens","from","from","from","goto","into","into","into","new","parse","reduce","simulate_reduce","source_id","start_location","start_state","token_to_index","token_to_symbol","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","uses_error_recovery","Ident","Keyword","Number","String","Tok","Unprocessed","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","ne","process","process_iter","to_owned","try_from","try_into","type_id","Printer","borrow","borrow_mut","file_id","fmgr","from","into","lexer","new","print_token","try_from","try_into","type_id"],"q":["calypso_parsing","","","calypso_parsing::lexer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calypso_parsing::lexer::helpers","","","","","","","","calypso_parsing::lexer::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calypso_parsing::lexer::types::TokenType","","","","","","","calypso_parsing::parser","","","calypso_parsing::parser::grammar","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calypso_parsing::parser::grammar::__parse__Expr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calypso_parsing::parser::tokens","","","","","","","","","","","","","","","","","","","","","calypso_parsing::pretty","","","","","","","","","","","",""],"d":["","","","","","","","","","","","Get the span of the next character or the empty span of …","Set the <code>start</code> span to the span of the next character or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Scan a single token.","","","","","","","","","","","","","","","","","","","","","<code>&</code>","<code>&&</code>","<code>!</code>","<code>!=</code>","Comment","<code>^</code>","Character literal","<code>:</code>","End-of-file / end-of-input","<code>==</code>","Float literal","<code>Gt</code>","<code>>=</code>","<code>>></code>","Identifier","Integer literal (not split into sint/uint cause of …","Keyword","<code>(</code>","Line comments","<code><</code>","<code><=</code>","<code><<</code>","<code>-</code>","<code>%</code>","<code>|</code>","<code>||</code>","<code>+</code>","<code>)</code>","<code>/</code>","<code>*</code>","<code>**</code>","String literal","Types of Calypso tokens","<code>_</code>","Unexpected characters, included for lexer synchronization","Whitespace","","","","","","","","","","","","","","","","Is this a documentation comment?","Is this a documentation comment?","Is this an inner doc comment?","Is this an inner doc comment?","How deeply nested this comment is","The integer radix, or [<code>Radix::Decimal</code>] if not present","The integer suffix, if present","","","Processed versions of [<code>crate::lexer::TokenType</code>] for use …dentifier","Keyword","Number","String literal","","Representable as [<code>crate::lexer::TokenType</code>]","","","","","","","","","","","","","","","","","","","","","","","","","Print a token","","",""],"i":[0,0,0,0,0,0,0,1,2,1,2,1,1,1,1,2,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,2,1,2,1,1,2,0,1,1,1,1,2,0,0,1,1,1,1,1,1,2,1,2,1,2,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,5,4,5,5,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,0,9,9,9,9,9,9,9,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,9,10,7,9,10,7,10,10,10,10,9,10,7,10,9,10,7,7,7,10,10,10,10,10,10,10,9,10,7,9,10,7,9,10,7,10,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,0,12,12,12,12,12,12,0,12,12,12,12,12],"f":[null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["span",3]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[],["usize",15]],[[["radix",4]],["usize",15]],null,[[],[["calresult",6],["token",6]]],[[],["bool",15]],[[],["calresult",6]],[[],[["calresult",6],["bool",15]]],[[],[["calresult",6],["bool",15]]],[[],["calresult",6]],[[],[["calresult",6],["token",6]]],[[["radix",4]],[["calresult",6],["token",6]]],[[],[["calresult",6],["token",6]]],[[],[["calresult",6],["bool",15]]],[[],[["calresult",6],["token",6]]],[[],[["calresult",6],["token",6]]],[[],[["suffix",4],["option",4]]],[[],["calresult",6]],[[],["calresult",6]],[[],[["calresult",6],["usize",15]]],[[],[["calresult",6],["option",4]]],null,null,[[]],[[]],[[]],[[]],[[],["calresult",6]],[[],["calresult",6]],null,null,[[["filemgr",6],["str",15],["rc",3],["usize",15],["refcell",3]]],[[],["span",3]],[[["tokentype",4]],["token",6]],[[["span",3],["tokentype",4]],["token",6]],[[],["option",4]],null,null,[[],[["calresult",6],["token",6]]],[[["span",3]]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[["spanned",3]],["bool",15]],[[["spanned",3]],["bool",15]],[[["spanned",3]],["bool",15]],[[["spanned",3],["radix",4]],["bool",15]],[[["spanned",3]],["bool",15]],[[["spanned",3]],["bool",15]],[[["char",15]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["tokentype",4]],[[]],[[["tokentype",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[],["u64",15]],[[]],[[]],[[["tokentype",4]],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],["keyword",4]],[[["usize",15]],["keyword",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15],["usize",15]],["usize",15]],[[["usize",15],["usize",15]],["usize",15]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],null,null,[[],[["parseerror",4],["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["i8",15]],["i8",15]],[[["i8",15]],[["vec",3],["string",3]]],[[["usize",15],["i8",15]],["i8",15]],null,[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["usize",15],["vec",3],["i8",15],["vec",3],["option",4],["usize",15],["phantomdata",3]],[["option",4],["result",4]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[["usize",15],["vec",3],["option",4],["usize",15],["phantomdata",3]]],[[]],[[["phantomdata",3],["tok",4]],[["usize",15],["option",4]]],[[["tok",4],["usize",15],["phantomdata",3]],["__symbol",4]],null,[[["usize",15],["i8",15]],["i8",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i8",15]],["i8",15]],[[["i8",15]],["i8",15]],[[["errorrecovery",6]]],[[["i8",15]],[["vec",3],["string",3]]],[[]],[[]],[[]],[[["usize",15],["i8",15]],["i8",15]],[[]],[[]],[[]],[[],["exprparser",3]],[[["usize",15],["intoiterator",8]],[["box",3],["result",4],["parseerror",4]]],[[["option",4],["vec",3],["i8",15],["vec",3]],[["parseresult",6],["option",4]]],[[["i8",15]],["simulatedreduce",4]],null,[[]],[[]],[[],[["usize",15],["option",4]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["bool",15]],null,null,null,null,null,null,[[]],[[]],[[],["tok",4]],[[]],[[["tok",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["tok",4]],["bool",15]],[[["token",6]],[["tok",4],["calresult",6]]],[[["bool",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],null,null,[[]],[[]],null,[[["filemgr",6],["usize",15]]],[[["token",6]],[["string",3],["calresult",6]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Lexer"],[3,"Iter"],[4,"TokenType"],[13,"LineComment"],[13,"BlockComment"],[13,"Int"],[3,"ExprParser"],[8,"__ToTriple"],[4,"__Symbol"],[3,"__StateMachine"],[4,"Tok"],[3,"Printer"]]},\
"calypso_repl":{"doc":"","t":[3,6,3,11,11,12,11,11,11,11,12,11,12,12,11,11,12,12,12,12,12,11,11,12,11,11,12,11,11,11,12,11,11,11,11,11,11,11],"n":["Command","Eval","Repl","alias","aliases","aliases","borrow","borrow","borrow_mut","borrow_mut","cache","cache_command","cmd_regex","cmds","command","commands","ctx","description","editor","eval","eval","from","from","help","into","into","name","new","new","prefix","prefix","run","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["calypso_repl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","A closure that evaluates some input with some context …","A struct for doing REPL-like activities. This does not …","Add an alias","Extend the aliases vector","Aliases for this command","","","","","A HashMap containing references to the commands. This is …","","Regex for commands","Meta-command definitions. This is a <code>Vec</code> as you may want …","Add a command","Extend the commands vector","The context","The description of the command","The Rustyline context","A closure that evaluates the input and returns something …","A closure that evaluates the command’s input (excluding …","","","The help description of the command","","","The command’s name","","","","Prefix for commands. Default: <code>:</code>","Run the REPL.","","","","","",""],"i":[0,0,0,1,1,1,2,1,2,1,2,2,2,2,2,2,2,1,2,2,1,2,1,1,2,1,1,2,1,2,2,2,2,1,2,1,2,1],"f":[null,null,null,[[["string",3]]],[[["vec",3],["string",3]]],null,[[]],[[]],[[]],[[]],null,[[["arc",3]]],null,null,[[["command",3]]],[[["vec",3],["arc",3]]],null,null,null,null,null,[[]],[[]],null,[[]],[[]],null,[[["eval",6]]],[[["eval",6],["string",3]]],[[["string",3]]],null,[[["str",15]],[["result",4],["readlineerror",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Command"],[3,"Repl"]]},\
"calypso_util":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"saturnvm":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};