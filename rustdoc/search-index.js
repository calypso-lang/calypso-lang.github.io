var searchIndex = JSON.parse('{\
"calypso":{"doc":"","t":[0,0,5,0,5,5,5,5,0,5,5,5,5,5,7,5],"n":["commands","explain","explain","internal","internal","lexer","lexer_stdin","lexer_stdin_repl","messages","error","_error_category","_info","_note","_warn","GLOBAL","main"],"q":["calypso","calypso::commands","calypso::commands::explain","calypso::commands","calypso::commands::internal","","","","calypso","calypso::messages","","","","","calypso",""],"d":["","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,[[["argmatches",3]]],null,[[["argmatches",3]]],[[["argmatches",3]]],[[["argmatches",3]]],[[["bool",15]]],null,[[["display",8]]],[[["display",8]]],[[["display",8]]],[[["display",8]]],[[["display",8]]],null,[[]]],"p":[]},\
"calypso_ast":{"doc":"","t":[0,4,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,4,13,13,13,13,11,4,13,13,13,13,11,4,13,13,13,13,0,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["expr","Expr","BinOp","UnOp","Primary","BinOpKind","Add","Subtract","Multiply","Divide","Modulo","Exponent","LogicalOr","LogicalAnd","BitOr","BitXor","BitAnd","BitShiftLeft","BitShiftRight","Equal","NotEqual","Lt","Gt","LtEq","GtEq","UnOpKind","Negative","UnaryNot","Primary","Number","Bool","Atom","AtomStr","detuple_number","Radix","Decimal","Binary","Octal","Hexadecimal","radix","Suffix","Uint","Sint","Float","Invalid","visitor","Visitor","visit_expr","visit_primary","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","clone","clone","clone","clone","clone","clone","eq","ne","eq","eq","eq","ne","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","hash","hash","hash","hash"],"q":["calypso_ast","calypso_ast::expr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calypso_ast","calypso_ast::visitor","","","calypso_ast::expr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Implementation detail.","Number radixes.","No prefix or <code>0d</code>","<code>0b</code>","<code>0o</code>","<code>0x</code>","","Number suffixes.","<code>u</code>","<code>s</code>","<code>f</code>","Invalid suffix","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,3,0,4,4,4,4,4,0,5,5,5,5,5,0,6,6,6,6,0,0,7,7,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,1,2,3,4,5,6,1,1,2,3,4,4,5,6,1,2,3,4,5,6,2,3,5,6],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,null,null,[[],["u32",15]],null,null,null,null,null,null,null,[[["rc",3],["refcell",3]],["calresult",6]],[[["refcell",3],["rc",3]],["calresult",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["expr",4]],[[],["binopkind",4]],[[],["unopkind",4]],[[],["primary",4]],[[],["radix",4]],[[],["suffix",4]],[[["expr",4]],["bool",15]],[[["expr",4]],["bool",15]],[[["binopkind",4]],["bool",15]],[[["unopkind",4]],["bool",15]],[[["primary",4]],["bool",15]],[[["primary",4]],["bool",15]],[[["radix",4]],["bool",15]],[[["suffix",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]]],"p":[[4,"Expr"],[4,"BinOpKind"],[4,"UnOpKind"],[4,"Primary"],[4,"Radix"],[4,"Suffix"],[8,"Visitor"]]},\
"calypso_base":{"doc":"Base types and utilities for Calypso that don’t require …","t":[0,0,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,12,11,11,11,11,0,0,3,12,12,12,12,12,12,12,11,0,3,12,12,12,12,12,12,12,12,11,11,0,3,12,12,12,12,12,12,11,3,12,12,12,12,12,12,12,12,3,12,12,12,12,12,12,12,8,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,0,0,3,12,3,12,3,12,3,12,3,12,5,3,12,11,11,11,11,11,11,4,13,13,11,7,5,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["macros","span","Span","lo","hi","new","new_shrunk","new_dummy","lo","with_lo","hi","with_hi","is_dummy","shrink_to_lo","shrink_to_hi","is_empty","substitute_dummy","contains","overlaps","to","between","until","add_hi","sub_hi","add_lo","sub_lo","len","Spanned","span","value","new","value","value_owned","span","streams","generic","Streamed","elements","iter","num_passed","peek","peek2","peek3","prev","new","str","StringStream","string","num_chars","indices","chars_passed","peek","peek2","peek3","prev","new","slice","wrapper","StreamedIter","iter","num_passed","peek","peek2","peek3","prev","new","StringStream","string","num_chars","indices","chars_passed","peek","peek2","peek3","prev","Streamed","elements","iter","num_passed","peek","peek2","peek3","prev","Stream","is_at_end","peek","peek2","peek3","prev","next_if","next_if_eq","gorge_while","gorge_while_eq","peek_eq","peek2_eq","peek3_eq","prev_eq","peek_cond","peek2_cond","peek3_cond","prev_cond","symbol","kw","EMPTY","__private_field","UNDERSCORE","__private_field","TRUE","__private_field","FALSE","__private_field","NULL","__private_field","init","Symbol","0","intern","intern_static","intern_static_2","as_u32","as_str","is_empty","PotentiallyInterned","Uninterned","Interned","potentially_intern","GLOBAL_INTERNER","get_interner","static_list","init_trie","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","get_hash","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","is_at_end","peek","peek2","peek3","prev","is_at_end","peek","peek2","peek3","prev","is_at_end","peek","peek2","peek3","prev","as_ref","from","from","from","next","size_hint","next","size_hint","next","size_hint","clone","clone","clone","clone","clone","default","cmp","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","partial_cmp","deref","deref","deref","deref","deref","fmt","fmt","fmt","fmt","fmt","fmt","fmt","index","index","hash","hash","hash","initialize","initialize","initialize","initialize","initialize"],"q":["calypso_base","","calypso_base::span","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calypso_base","calypso_base::streams","calypso_base::streams::generic","","","","","","","","","calypso_base::streams","calypso_base::streams::str","","","","","","","","","","","calypso_base::streams","calypso_base::streams::wrapper","","","","","","","","calypso_base::streams","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calypso_base","calypso_base::symbol","calypso_base::symbol::kw","","","","","","","","","","","calypso_base::symbol","","","","","","","","","","","","","","calypso_base","","calypso_base::span","","","","","","","","","","","","","","","","","","","","calypso_base::streams::generic","","","","","","","","calypso_base::streams::str","","","","","","","","","","calypso_base::streams::wrapper","","","","","","","","calypso_base::symbol::kw","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calypso_base::symbol","","","","","","","","","","","","","","","","","","","","","calypso_base::streams::generic","","","","","calypso_base::streams::str","","","","","calypso_base::streams::wrapper","","","","","calypso_base::symbol","calypso_base::span","","","calypso_base::streams::generic","","calypso_base::streams::str","","calypso_base::streams::wrapper","","calypso_base::span","","calypso_base::streams::str","calypso_base::symbol","","calypso_base::span","","","","","","","calypso_base::symbol","","","","","calypso_base::symbol::kw","calypso_base::symbol","calypso_base::symbol::kw","calypso_base::symbol","calypso_base::symbol::kw","calypso_base::symbol","calypso_base::symbol::kw","calypso_base::symbol","calypso_base::symbol::kw","calypso_base::span","calypso_base::symbol::kw","","","","","calypso_base::span","","calypso_base::streams::str","calypso_base::symbol","","","","calypso_base::streams::generic","calypso_base::streams::str","calypso_base::span","","calypso_base::symbol","calypso_base::symbol::kw","","","",""],"d":["Common macros for ease of use in other parts of the …","<code>Span</code> and <code>Spanned</code> types.","The location in a slice in which some object spans.","","","","","Create a dummy span (that has a span equivalent to the …","","","","","Returns <code>true</code> if this is a dummy span","Returns a new span representing an empty span at the …","Returns a new span representing an empty span at the end …","Returns true if if <code>hi == lo</code>","Returns <code>self</code> if <code>self</code> is not a dummy span, and <code>other</code> …","Returns <code>true</code> if <code>self</code> fully encloses <code>other</code>.","Returns <code>true</code> if <code>self</code> touches <code>other</code>.","Returns a <code>Span</code> that would enclose both <code>self</code> and <code>end</code>.","Returns a <code>Span</code> between the end of <code>self</code> to the beginning …","Returns a <code>Span</code> from the beginning of <code>self</code> until the …","","","","","","An object that’s associated with a <code>Span</code>","","","Associate a span with a value.","Get a reference to the value.","Get the owned value.","Get the value’s <code>Span</code>","Utilities for handling streams of data","Generic streams","A generic stream.","A reference to the underlying slice","The stream’s current char and index","The number of elements passed so far.","1elem peek","2elem peek","3elem peek","1elem backwards peek","","String streams","A stream emitting tuples of byte locations and characters …","A reference to the underlying string","The cached number of characters in the string, as …","The stream’s current char and index","The number of characters passed so far.","1ch peek","2ch peek","3ch peek","1ch backwards peek","","","Streams that wrap iterators","A generic stream that wraps an existing iterator.","The wrapped iterator","The number of elements passed so far.","1elem peek","2elem peek","3elem peek","1elem backwards peek","","A stream emitting tuples of byte locations and characters …","A reference to the underlying string","The cached number of characters in the string, as …","The stream’s current char and index","The number of characters passed so far.","1ch peek","2ch peek","3ch peek","1ch backwards peek","A generic stream.","A reference to the underlying slice","The stream’s current char and index","The number of elements passed so far.","1elem peek","2elem peek","3elem peek","1elem backwards peek","A trait for streamed data. For a stream, <code>EOF</code> means either …","This stream can no longer produce elements if this …","Peek at the value one element ahead, without consuming it.","Peek at the value two element ahead, without consuming …","Peek at the value three element ahead, without consuming …","Peek at the value one element behind, without moving …","Consume the next element if the condition is true.","Consume the next element if it is equal to <code>expected</code>.","Keep consuming elements while the condition is true and …","Keep consuming elements while the element is equal to …","Returns <code>Some(true)</code> if the value one element ahead is …","Returns <code>Some(true)</code> if the value two elements ahead is …","Returns <code>Some(true)</code> if the value three elements ahead is …","Returns <code>Some(true)</code> if the value one element behind is …","Returns the value of the condition, wrapped in an <code>Option</code>. …","Returns the value of the condition, wrapped in an <code>Option</code>. …","Returns the value of the condition, wrapped in an <code>Option</code>. …","Returns the value of the condition, wrapped in an <code>Option</code>. …","Utilities for interned strings (symbols)","","","","","","","","","","","","","","","","","","","","","","","","","","","Initialize a <code>static</code> list with the values specified.","Initialize a <code>radix_trie::Trie</code> with specified values using …i":[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,0,0,0,3,3,3,3,3,3,3,3,0,0,4,4,4,4,4,4,4,4,4,4,0,0,5,5,5,5,5,5,5,0,4,4,4,4,4,4,4,4,0,3,3,3,3,3,3,3,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,7,0,8,0,9,0,10,0,11,0,0,12,12,12,12,12,12,12,0,13,13,13,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,13,1,2,2,3,3,4,4,5,5,1,2,4,12,13,1,1,1,1,2,2,2,12,12,13,13,12,7,12,8,12,9,12,10,12,11,1,7,8,9,10,11,1,2,4,12,13,12,13,3,4,1,2,12,7,8,9,10,11],"f":[null,null,null,null,null,[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[["usize",15]]],[[],["usize",15]],[[["usize",15]]],[[],["bool",15]],[[],["span",3]],[[],["span",3]],[[],["bool",15]],[[["span",3]],["span",3]],[[["span",3]],["bool",15]],[[["span",3]],["bool",15]],[[["span",3]],["span",3]],[[["span",3]],["span",3]],[[["span",3]],["span",3]],[[["usize",15]],["span",3]],[[["usize",15]],["span",3]],[[["usize",15]],["span",3]],[[["usize",15]],["span",3]],[[],["usize",15]],null,null,null,[[["span",3]]],[[]],[[]],[[],["span",3]],null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,null,[[["str",15]]],[[],["str",15]],null,null,null,null,null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],[["bool",15],["option",4]]],[[],[["bool",15],["option",4]]],[[],[["bool",15],["option",4]]],[[],[["bool",15],["option",4]]],[[],[["bool",15],["option",4]]],[[],[["bool",15],["option",4]]],[[],[["bool",15],["option",4]]],[[],[["bool",15],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,[[["str",15]]],[[["str",15]]],[[["str",15]]],[[],["u32",15]],[[],["str",15]],[[],["bool",15]],null,null,null,[[["str",15]]],null,[[],["threadedrodeo",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["str",15]],[[["usize",15],["range",3]]],[[]],[[],[["spanned",3],["char",15]]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["span",3]],[[],["spanned",3]],[[],["stringstream",3]],[[],["symbol",3]],[[],["potentiallyinterned",4]],[[]],[[["span",3]],["ordering",4]],[[["span",3]],["bool",15]],[[["span",3]],["bool",15]],[[["spanned",3]],["bool",15]],[[["spanned",3]],["bool",15]],[[],["bool",15]],[[["symbol",3]],["bool",15]],[[["symbol",3]],["bool",15]],[[["potentiallyinterned",4]],["bool",15]],[[["potentiallyinterned",4]],["bool",15]],[[["empty",3]],["bool",15]],[[["empty",3]],["bool",15]],[[["underscore",3]],["bool",15]],[[["underscore",3]],["bool",15]],[[["true",3]],["bool",15]],[[["true",3]],["bool",15]],[[["false",3]],["bool",15]],[[["false",3]],["bool",15]],[[["null",3]],["bool",15]],[[["null",3]],["bool",15]],[[["span",3]],[["option",4],["ordering",4]]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"Span"],[3,"Spanned"],[3,"Streamed"],[3,"StringStream"],[3,"StreamedIter"],[8,"Stream"],[3,"EMPTY"],[3,"UNDERSCORE"],[3,"TRUE"],[3,"FALSE"],[3,"NULL"],[3,"Symbol"],[4,"PotentiallyInterned"]]},\
"calypso_diagnostic":{"doc":"","t":[0,4,13,13,4,13,13,13,13,13,3,12,12,3,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,0,4,13,13,0,3,12,12,11,11,11,11,11,0,3,12,0,4,13,13,13,6,4,13,13,6,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["diagnostic","LabelStyle","Primary","Secondary","Severity","Bug","Error","Warning","Note","Help","Diagnostic","0","1","Builder","level","code","message","labels","notes","files","new","code","message","label","note","build","reason","code","rendered","error","DiagnosticError","Rendering","Diagnostic","report","GlobalReportingCtxt","errors","nonfatals","new","report_syncd","report_non_fatal","nonfatals","errors","types","DIAGNOSTICS","__private_field","prelude","CalError","Io","FromUtf8","Other","CalResult","LabelStyle","Primary","Secondary","FileMgr","gen_error","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","fmt","fmt","source","from","from","from","clone","clone","hash","fmt","fmt","eq","eq","partial_cmp","partial_cmp","from","from","from","clone","clone","clone","default","deref","fmt","fmt","fmt","fmt","fmt","fmt","source","initialize"],"q":["calypso_diagnostic","calypso_diagnostic::diagnostic","","","","","","","","","","","","","","","","","","","","","","","","","","","","calypso_diagnostic","calypso_diagnostic::error","","","calypso_diagnostic","calypso_diagnostic::report","","","","","","","","calypso_diagnostic","calypso_diagnostic::types","","calypso_diagnostic","calypso_diagnostic::prelude","","","","","","","","calypso_diagnostic","","calypso_diagnostic::prelude","","","","","","","","","calypso_diagnostic::diagnostic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calypso_diagnostic::error","","","","","","","","calypso_diagnostic::report","","","","","","","","","calypso_diagnostic::types","","","","","","","calypso_diagnostic::prelude","","","","","","","","","","","","","","","calypso_diagnostic::diagnostic","","","calypso_diagnostic::prelude","calypso_diagnostic::diagnostic","calypso_diagnostic::prelude","","calypso_diagnostic::diagnostic","calypso_diagnostic::error","calypso_diagnostic::prelude","calypso_diagnostic::error","calypso_diagnostic::diagnostic","","calypso_diagnostic::report","","calypso_diagnostic::types","calypso_diagnostic::diagnostic","","calypso_diagnostic::error","calypso_diagnostic::report","calypso_diagnostic::diagnostic","calypso_diagnostic::error","","calypso_diagnostic::types"],"d":["","","Labels that describe the primary cause of a diagnostic.","Labels that provide additional context for a diagnostic.","A severity level for diagnostic messages.","An unexpected bug.","An error.","A warning.","A note.","A help message.","","","","","","","","","","","","","","","","Build the diagnostic. This pre-renders the diagnostic.","","","","","An extension of [<code>CalError</code>] used for diagnostics.","","","","","","","","","","","","","","","","The Calypso error type.","IO errors","UTF-8 decoding errors","Any other error, using [<code>anyhow</code>]","A handy alias for [<code>Result<T, CalError></code>], genericized over …","","Labels that describe the primary cause of a diagnostic.","Labels that provide additional context for a diagnostic.","","Generate errors or report synchronized errors.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,0,2,2,2,2,2,0,3,3,0,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,0,0,5,5,0,0,6,6,6,6,6,6,6,0,0,7,0,0,8,8,8,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,2,2,2,1,2,1,1,2,5,8,5,3,4,6,6,7,3,4,5,6,3,5,5,7],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["severity",4],["filemgr",6]]],[[]],[[]],[[["usize",15],["span",3],["labelstyle",4]]],[[]],[[],[["diagnostic",3],["calresult",6]]],[[],["str",15]],[[],[["option",4],["str",15]]],[[],["str",15]],null,null,null,null,null,null,null,null,[[]],[[["diagnostic",3]]],[[["diagnostic",3]]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],[["option",4],["error",8]]],[[["fromutf8error",3]],["calerror",4]],[[["error",3]],["calerror",4]],[[["error",3]],["calerror",4]],[[],["labelstyle",4]],[[],["severity",4]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["severity",4]],["bool",15]],[[["labelstyle",4]],["bool",15]],[[["labelstyle",4]],[["ordering",4],["option",4]]],[[["severity",4]],[["ordering",4],["option",4]]],[[["diagrendererror",4]]],[[["diagnosticerror",4]]],[[["diagnostic",3]]],[[],["diagnostic",3]],[[],["builder",3]],[[],["globalreportingctxt",3]],[[],["globalreportingctxt",3]],[[],["hashmap",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["option",4],["error",8]]],[[]]],"p":[[4,"LabelStyle"],[4,"Severity"],[3,"Diagnostic"],[3,"Builder"],[4,"DiagnosticError"],[3,"GlobalReportingCtxt"],[3,"DIAGNOSTICS"],[4,"CalError"]]},\
"calypso_error":{"doc":"Error-handling utilities and types for use in Calypso.","t":[4,13,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CalError","Io","FromUtf8","Other","CalResult","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","from","from","fmt","fmt","source"],"q":["calypso_error","","","","","","","","","","","","","","","","","",""],"d":["The Calypso error type.","IO errors","UTF-8 decoding errors","Any other error, using [<code>anyhow</code>]","A handy alias for [<code>Result<T, CalError></code>], genericized over …","","","","","","","","","","","","","",""],"i":[0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,null,null,[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["error",3]]],[[["fromutf8error",3]]],[[["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["option",4],["error",8]]]],"p":[[4,"CalError"]]},\
"calypso_filety":{"doc":"<code>calypso_filety</code>","t":[0,0,3,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,12,12,12,12,3,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ccff","hl","ContainerFile","abi","filety","sections","new","abi","filety","get_abi","get_filety","add_section","remove_section","get_section","get_section_mut","sections","sections_mut","encode","decode","read_all","Section","name","stype","flags","data","offset","size","new","get_name","stype","get_stype","flags","get_flags","data","get_data","get_data_mut","seek_to_data","read_data","get_offset","encode","decode","ll","CcffHeader","magic","abi","filety","sections","CcffSectionHeader","name","section_type","flags","offset","size","read","write","size","seek_to_data","read_data","size","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","clone","clone","clone","clone","default","default","eq","ne","eq","ne","eq","ne","eq","ne","fmt","fmt","fmt","fmt","serialize","serialize","deserialize","deserialize"],"q":["calypso_filety","calypso_filety::ccff","calypso_filety::ccff::hl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calypso_filety::ccff","calypso_filety::ccff::ll","","","","","","","","","","","","","","","","","calypso_filety::ccff::hl","","","","","","","","","","","","","","","","","","calypso_filety::ccff::ll","","","","","","","","","","","","","","","","","","calypso_filety::ccff::hl","","calypso_filety::ccff::ll","","calypso_filety::ccff::hl","","","","","","calypso_filety::ccff::ll","","","","calypso_filety::ccff::hl","","calypso_filety::ccff::ll","","","","",""],"d":["Calypso Container File Format. See the module-level docs …","A high-level interface for CCFF files","A higher-level interface to a CCFF container file.","","","","Create a new container file. The ABI and file type (<code>filety</code>…","Set the ABI of the container file. This can be any …","Set the file type of the container file. This can be any …","Get the ABI of the container file.","Get the file type of the container file.","Add a section to the container file.","Remove a section from the container file. Does nothing if …","Get a reference to a section in the container file.","Get a mutable reference to a section in the container …","Iterate over the sections in the container file.","Iterate mutably over the sections in the container file.","Encode the container file as its low-level counterpart. …","Decode the container file from its low-level counterpart.","Read the entirety of the container file’s section data. …","A higher-level interface to a CCFF section.","","","","","","","Create a section. The section type (<code>stype</code>) or flags can …","Get the name of the section.","Set the type of the section. This can be any arbitrary …","Get the type of the section.","Set the flags of the section. This can be any arbitrary …","Get the flags of the section.","Set the data of the section. This can be any arbitrary …","Get a reference to the data of the section. This may not …","Get a mutable reference to the data of the section. This …","Seek to the location of the data in the reader.","Read the entirety of the section’s data. It is not …","Get the offset of the data. This is only present if …","Encode the section as its low-level counterpart. This …","Decode a section from its lower-level counterpart.","Low-level (binary representation with bincode) for CCFF …","The header for a CCFF file","The 2 magic bytes","A user-defined ABI version.","A user-defined file type.","The CCFF section headers, encoded as a length-array (i.e. …","The header for a CCFF section. This does not include the …","The section name, encoded as a length-string (i.e. a …","A user-defined section type.","User-defined section flags.","The offset, in bytes, of the section from the begining of …","The size, in bytes, of this section","Read the CCFF header and magic bytes.","Write the CCFF header and magic bytes.","Get the size of the CCFF header, including the magic …","Seek to the data.","Read the entirety of the data. This function assumes that …","Get the size of this header as it would be encoded.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,3,3,3,3,0,4,4,4,4,4,3,3,3,4,4,4,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,1,2,3,4,1,2,1,1,2,2,3,3,4,4,1,2,3,4,3,4,3,4],"f":[null,null,null,null,null,null,[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[],["u64",15]],[[],["u64",15]],[[["section",3]]],[[["str",15]]],[[["str",15]],[["section",3],["option",4]]],[[["str",15]],[["option",4],["section",3]]],[[]],[[]],[[]],[[["ccffheader",3]]],[[],["calresult",6]],null,null,null,null,null,null,null,[[["string",3],["u64",15]]],[[],["str",15]],[[["u64",15]]],[[],["u64",15]],[[["u64",15]]],[[],["u64",15]],[[["vec",3],["u8",15]]],[[],["option",4]],[[],[["option",4],["vec",3]]],[[],["calresult",6]],[[],["calresult",6]],[[],[["option",4],["u64",15]]],[[]],[[["ccffsectionheader",3]]],null,null,null,null,null,null,null,null,null,null,null,null,[[],["calresult",6]],[[],["calresult",6]],[[],["usize",15]],[[],["calresult",6]],[[],[["calresult",6],["vec",3]]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["containerfile",3]],[[],["section",3]],[[],["ccffheader",3]],[[],["ccffsectionheader",3]],[[],["containerfile",3]],[[],["section",3]],[[["containerfile",3]],["bool",15]],[[["containerfile",3]],["bool",15]],[[["section",3]],["bool",15]],[[["section",3]],["bool",15]],[[["ccffheader",3]],["bool",15]],[[["ccffheader",3]],["bool",15]],[[["ccffsectionheader",3]],["bool",15]],[[["ccffsectionheader",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]]],"p":[[3,"ContainerFile"],[3,"Section"],[3,"CcffHeader"],[3,"CcffSectionHeader"]]},\
"calypso_opt":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"calypso_parsing":{"doc":"","t":[0,0,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,13,12,12,12,13,13,13,13,12,12,13,4,13,13,13,0,7,5,5,5,5,5,5,5,0,3,12,0,0,0,0,3,12,6,6,3,12,12,12,12,12,11,11,11,11,11,11,11,3,12,12,12,0,0,0,0,4,13,13,13,13,13,13,13,17,5,17,5,5,3,12,12,5,5,3,12,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,12,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,10,0,4,13,13,13,13,13,5,5,0,0,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["lexer","types","TokenType","Plus","Minus","Star","StarStar","Slash","Percent","Pipe","PipePipe","And","AndAnd","Bang","Caret","GtGt","LtLt","EqEq","GtEq","LtEq","BangEq","Lt","Gt","Colon","Under","LParen","RParen","Eof","Unexpected","Ident","Ws","LineComment","doc","inner","BlockComment","doc","inner","nest_level","Keyword","String","Char","Int","suffix","radix","Float","Keyword","False","Null","True","helpers","WHITESPACE","is_valid_for_char_literal","is_whitespace","is_whitespace_ch","is_ident_start","is_ident_continue","is_ident_end","is_valid_for","ident_kw","KEYWORD_TRIE","__private_field","lit","num","scan","ws","KEYWORD_TRIE","__private_field","Token","Lexeme","Lexer","stream","source_id","files","start","grcx","new","current_to_start","set_start","current","new_span","new_token","new_token_with_span","Iter","lexer","encountered_error","encountered_eof","parser","expr","grammar","__parse__Expr","__Symbol","Variant0","Variant1","Variant2","Variant3","Variant4","Variant5","Variant6","__ACTION","__action","__EOF_ACTION","__goto","__expected_tokens","__StateMachine","source_id","__phantom","__token_to_integer","__token_to_symbol","ExprParser","_priv","new","parse","__reduce","__symbol_type_mismatch","__pop_Variant2","__pop_Variant6","__pop_Variant5","__pop_Variant3","__pop_Variant1","__pop_Variant0","__pop_Variant4","__reduce0","__reduce1","__reduce2","__reduce3","__reduce4","__reduce5","__reduce6","__reduce7","__reduce8","__reduce9","__reduce10","__reduce11","__reduce12","__reduce13","__reduce14","__reduce15","__reduce16","__reduce17","__reduce18","__reduce19","__reduce20","__reduce21","__reduce22","__reduce23","__reduce24","__reduce25","__reduce26","__reduce27","__reduce28","__reduce29","__reduce30","__reduce31","__reduce32","__reduce33","__reduce34","__reduce35","__reduce36","__reduce37","__reduce38","__reduce39","__reduce40","__reduce41","__reduce42","__reduce43","__reduce44","__reduce45","__reduce46","__reduce47","__reduce48","__reduce49","__reduce50","__reduce51","__reduce52","__reduce53","__reduce54","__reduce55","__reduce56","__reduce57","__reduce58","__reduce59","__reduce60","__reduce61","__reduce62","__reduce63","__reduce64","__reduce65","__reduce66","ExprParser","_priv","__action0","__action1","__action2","__action3","__action4","__action5","__action6","__action7","__action8","__action9","__action10","__action11","__action12","__action13","__action14","__action15","__action16","__action17","__action18","__action19","__action20","__action21","__action22","__action23","__action24","__action25","__action26","__action27","__action28","__action29","__action30","__action31","__action32","__action33","__action34","__action35","__action36","__action37","__action38","__action39","__action40","__action41","__action42","__action43","__action44","__action45","__action46","__action47","__action48","__action49","__action50","__action51","__action52","__action53","__action54","__action55","__action56","__action57","__action58","__action59","__action60","__action61","__action62","__action63","__action64","__action65","__action66","__action67","__action68","__action69","__action70","__action71","__ToTriple","to_triple","tokens","Tok","Unprocessed","Number","Bool","Ident","String","process","process_iter","pretty","lexer","Printer","file_id","fmgr","new","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","into_iter","next","clone","clone","clone","eq","ne","eq","eq","ne","deref","deref","deref_mut","fmt","fmt","fmt","fmt","fmt","hash","hash","initialize","start_location","start_state","token_to_index","action","error_action","eof_action","goto","token_to_symbol","expected_tokens","uses_error_recovery","error_recovery_symbol","reduce","simulate_reduce","handle_identifier","handle_escape_character","handle_hex_escape","handle_unicode_escape","handle_unicode_escape_internal","handle_char_literal","handle_string_literal","handle_number","handle_int_leading_zero","handle_suffix","handle_float_part","inval_float_decimal","inval_float_exponent","handle_unexpected_underscore","gorge_digits","gorge_digits_radix","handle_int","scan","handle_whitespace","handle_comment","handle_multiline_comment","handle_dangling_comment_ends","print_token"],"q":["calypso_parsing","calypso_parsing::lexer","calypso_parsing::lexer::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calypso_parsing::lexer::types::TokenType","","calypso_parsing::lexer::types","calypso_parsing::lexer::types::TokenType","","","calypso_parsing::lexer::types","","","","calypso_parsing::lexer::types::TokenType","","calypso_parsing::lexer::types","","","","","calypso_parsing::lexer","calypso_parsing::lexer::helpers","","","","","","","","calypso_parsing::lexer","calypso_parsing::lexer::ident_kw","","calypso_parsing::lexer","","","","","","","","","","","","","","","","","","","","","","","","","calypso_parsing","calypso_parsing::parser","","calypso_parsing::parser::grammar","calypso_parsing::parser::grammar::__parse__Expr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calypso_parsing::parser::grammar","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calypso_parsing::parser","calypso_parsing::parser::tokens","","","","","","","","calypso_parsing","calypso_parsing::pretty","","","","","calypso_parsing::lexer::types","","","","","","","","","","","","","","","","","","","","calypso_parsing::lexer::ident_kw","","","","","","","calypso_parsing::lexer","","","","","","","","","","","","","","","calypso_parsing::parser::grammar::__parse__Expr","","","","","","","","","","","","","","","","","","","","","calypso_parsing::parser::tokens","","","","","","","","","calypso_parsing::pretty","","","","","","","calypso_parsing::lexer","","calypso_parsing::lexer::types","","calypso_parsing::parser::tokens","calypso_parsing::lexer::types","","","calypso_parsing::parser::tokens","","calypso_parsing::lexer::ident_kw","calypso_parsing::lexer","","calypso_parsing::lexer::types","","calypso_parsing::lexer","","calypso_parsing::parser::tokens","calypso_parsing::lexer::types","","calypso_parsing::lexer::ident_kw","calypso_parsing::parser::grammar::__parse__Expr","","","","","","","","","","","","","calypso_parsing::lexer","","","","","","","","","","","","","","","","","","","","","","calypso_parsing::pretty"],"d":["","","Types of Calypso tokens","<code>+</code>","<code>-</code>","<code>*</code>","<code>**</code>","<code>/</code>","<code>%</code>","<code>|</code>","<code>||</code>","<code>&</code>","<code>&&</code>","<code>!</code>","<code>^</code>","<code>>></code>","<code><<</code>","<code>==</code>","<code>>=</code>","<code><=</code>","<code>!=</code>","<code><</code>","<code>Gt</code>","<code>:</code>","<code>_</code>","<code>(</code>","<code>)</code>","End-of-file / end-of-input","Unexpected characters, included for lexer synchronization","Identifier","Whitespace","Line comments","Is this a documentation comment?","Is this an inner doc comment?","Comment","Is this a documentation comment?","Is this an inner doc comment?","How deeply nested this comment is","Keyword","String literal","Character literal","Integer literal (not split into sint/uint cause of …","The integer suffix, if present","The integer radix, or [<code>Radix::Decimal</code>] if not present","Float literal","","<code>false</code>","<code>null</code>","<code>true</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the <code>start</code> span to the span of the next character or …","","Get the span of the next character or the empty span of …rocessed versions of [<code>crate::lexer::TokenType</code>] for use …","","Representable as [<code>crate::lexer::TokenType</code>]","Number","Boolean","Identifier","String literal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Scan a single token.","","","","","Print a token"],"i":[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,3,3,3,1,1,1,1,4,4,1,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,6,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,0,8,8,8,0,0,0,0,0,9,9,9,9,9,9,9,0,0,0,0,0,0,10,10,0,0,0,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,13,13,13,13,13,0,0,0,0,0,14,14,14,1,1,1,1,1,1,1,1,1,1,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,7,8,1,5,13,1,1,5,13,13,6,7,7,1,5,7,8,13,1,5,6,10,10,10,10,10,10,10,10,10,10,10,10,10,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,14],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["spanned",3]],["bool",15]],[[["spanned",3]],["bool",15]],[[["char",15]],["bool",15]],[[["spanned",3]],["bool",15]],[[["spanned",3]],["bool",15]],[[["spanned",3]],["bool",15]],[[["spanned",3],["radix",4]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["rc",3],["filemgr",6],["str",15],["refcell",3]]],[[]],[[["span",3]]],[[],["span",3]],[[],["span",3]],[[["tokentype",4]],["token",6]],[[["tokentype",4],["span",3]],["token",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["i8",15]],["i8",15]],null,[[["usize",15],["i8",15]],["i8",15]],[[["i8",15]],[["vec",3],["string",3]]],null,null,null,[[["phantomdata",3],["tok",4]],[["usize",15],["option",4]]],[[["usize",15],["tok",4],["phantomdata",3]],["__symbol",4]],null,null,[[],["exprparser",3]],[[["usize",15],["intoiterator",8]],[["box",3],["parseerror",4],["result",4]]],[[["usize",15],["option",4],["vec",3],["phantomdata",3],["usize",15],["vec",3],["i8",15]],[["option",4],["result",4]]],[[]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],[[["usize",15],["option",4],["usize",15],["vec",3],["phantomdata",3]]],null,null,[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15]],["binopkind",4]],[[["usize",15],["usize",15]],["usize",15]],[[["usize",15],["usize",15]],["usize",15]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],[[["usize",15]],[["expr",4],["box",3]]],null,[[],[["result",4],["parseerror",4]]],null,null,null,null,null,null,null,[[["token",6]],[["tok",4],["calresult",6]]],[[["bool",15]]],null,null,null,null,null,[[["usize",15],["filemgr",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["tokentype",4]],[[],["keyword",4]],[[],["tok",4]],[[["tokentype",4]],["bool",15]],[[["tokentype",4]],["bool",15]],[[["keyword",4]],["bool",15]],[[["tok",4]],["bool",15]],[[["tok",4]],["bool",15]],[[],["trie",3]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],[["usize",15],["option",4]]],[[["usize",15],["i8",15]],["i8",15]],[[["i8",15]],["i8",15]],[[["i8",15]],["i8",15]],[[["usize",15],["i8",15]],["i8",15]],[[["usize",15]]],[[["i8",15]],[["vec",3],["string",3]]],[[],["bool",15]],[[["errorrecovery",6]]],[[["vec",3],["option",4],["vec",3],["i8",15]],[["option",4],["parseresult",6]]],[[["i8",15]],["simulatedreduce",4]],[[],[["token",6],["calresult",6]]],[[],[["bool",15],["calresult",6]]],[[],["calresult",6]],[[],["calresult",6]],[[],[["usize",15],["calresult",6]]],[[],[["token",6],["calresult",6]]],[[],[["token",6],["calresult",6]]],[[],[["token",6],["calresult",6]]],[[],[["token",6],["calresult",6]]],[[],[["suffix",4],["option",4]]],[[],[["bool",15],["calresult",6]]],[[["bool",15]],["calresult",6]],[[["bool",15]],["calresult",6]],[[],["calresult",6]],[[],["usize",15]],[[["radix",4]],["usize",15]],[[["radix",4]],[["token",6],["calresult",6]]],[[],[["token",6],["calresult",6]]],[[],[["option",4],["calresult",6]]],[[],["bool",15]],[[],[["bool",15],["calresult",6]]],[[],["calresult",6]],[[["token",6]],[["calresult",6],["string",3]]]],"p":[[4,"TokenType"],[13,"LineComment"],[13,"BlockComment"],[13,"Int"],[4,"Keyword"],[3,"KEYWORD_TRIE"],[3,"Lexer"],[3,"Iter"],[4,"__Symbol"],[3,"__StateMachine"],[3,"ExprParser"],[8,"__ToTriple"],[4,"Tok"],[3,"Printer"]]},\
"calypso_repl":{"doc":"","t":[3,12,12,12,12,12,12,12,11,11,11,11,11,11,6,3,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Repl","eval","cmds","cache","editor","ctx","prefix","cmd_regex","new","prefix","commands","command","run","cache_command","Eval","Command","name","description","help","aliases","eval","new","aliases","alias","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id"],"q":["calypso_repl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A struct for doing REPL-like activities. This does not …","A closure that evaluates the input and returns something …","Meta-command definitions. This is a <code>Vec</code> as you may want …","A HashMap containing references to the commands. This is …","The Rustyline context","The context","Prefix for commands. Default: <code>:</code>","Regex for commands","","","Extend the commands vector","Add a command","Run the REPL.","","A closure that evaluates some input with some context …","","The command’s name","The description of the command","The help description of the command","Aliases for this command","A closure that evaluates the command’s input (excluding …","","Extend the aliases vector","Add an alias","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,2,2,2,2,2,2,2],"f":[null,null,null,null,null,null,null,null,[[["eval",6]]],[[["string",3]]],[[["vec",3],["arc",3]]],[[["command",3]]],[[["str",15]],[["readlineerror",4],["result",4]]],[[["arc",3]]],null,null,null,null,null,null,null,[[["eval",6],["string",3]]],[[["vec",3],["string",3]]],[[["string",3]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Repl"],[3,"Command"]]},\
"calypso_util":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"saturnvm":{"doc":"","t":[0,3,12,11,11,11,11,11,0,0,3,12,11,11,0,3,12,11,3,12,11,3,12,11,0,8,16,16,11,11,11,11,10,10,8,10,10,10,10,8,16,16,16,0,0,0,4,13,13,13,13,4,13,13,3,12,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["arena","Arena","storage","new","populate","alloc","get","get_mut","bc","context","Context","modules","new","module","module","Module","name","new","ModuleEntry","id","new","ModuleBuilder","id","new","traits","Entry","Parent","Element","get","is_finished","enter","finish","id","internal_build","Parent","is_finished","get","create_builder","finish","Element","Entry","Builder","Id","prelude","ccff","types","FileType","Null","Executable","Object","DynamicObject","SectionType","AtomTable","StrData","SectionFlags","bits","NONE","READ","WRITE","EXEC","STATIC","RX","RW","RS","empty","all","bits","from_bits","from_bits_truncate","from_bits_unchecked","is_empty","is_all","intersects","contains","insert","remove","toggle","set","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","id","internal_build","get","is_finished","finish","create_builder","extend","clone","clone","clone","default","default","cmp","eq","eq","eq","ne","partial_cmp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","sub","sub_assign","not","bitand","bitor","bitxor","bitand_assign","bitor_assign","bitxor_assign","hash","try_from","try_from","from_iter","fmt","fmt","fmt","fmt","try_from_primitive","try_from_primitive"],"q":["saturnvm","saturnvm::arena","","","","","","","saturnvm","saturnvm::bc","saturnvm::bc::context","","","","saturnvm::bc","saturnvm::bc::module","","","","","","","","","saturnvm::bc","saturnvm::bc::traits","","","","","","","","","","","","","","","","","","saturnvm::bc","saturnvm","saturnvm::ccff","saturnvm::ccff::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saturnvm::arena","","","","","","","saturnvm::bc::context","","","","","","","","","saturnvm::bc::module","","","","","","","","","","","","","","","","","","","","","","","saturnvm::ccff::types","","","","","","","","","","","","","","","","","","","","","","","saturnvm::bc::module","","saturnvm::bc::context","","","","saturnvm::ccff::types","saturnvm::bc::context","saturnvm::bc::module","saturnvm::ccff::types","saturnvm::arena","saturnvm::bc::context","saturnvm::ccff::types","","","","","","saturnvm::bc::context","saturnvm::bc::module","","","saturnvm::ccff::types","","","","","","","","","","","","","","","","","","","","",""],"d":["A simple arena for use within SaturnVM, built with a <code>Vec</code>, …","A simple arena for use within SaturnVM, built with a <code>Vec</code>, …","","Create a new arena with no allocated storage.","Populate the arena with the list of items. The list …","Allocate an item and return its ID.","Get a reference to an item in the arena by its ID.","Get a mutable reference to an item in the arena by its ID.","","The root [<code>Parent</code>] object for SaturnVM bytecode.","","","","","A bytecode [<code>Element</code>] corresponding to a single module, …","","","","","","","","","","Traits used to make construction of bytecode builders …","A trait used for “entries” of a bytecode [<code>Parent</code>], …","The parent type of this entry.","The element type of this entry.","Get the bytecode element behind this entry, if finished.","Check if the bytecode element has been finished.","Enter the builder context and use the closure to build …","Finish the bytecode element.","Get the ID of the bytecode element behind the entry.","An internal function to register changes caused by a …","A bytecode parent, i.e. a structure that contains one or …","Check if a bytecode element is finished. This function …","Get a reference to a bytecode element. This function is …","Create a builder from the specified bytecode element ID.","Finish the bytecode element with the specified ID.","A bytecode element, i.e. a single element in the …","The entry type of this bytecode element.","The builder type of this bytecode element, i.e. a …","The ID type of this bytecode element. It is required to …","","An interface to [<code>calypso_filety</code>] for SaturnVM, …","Types that are used within the CCFF interface, …","The type of the file.","Unspecified file type","Executable files","Object files","Shared object files","The type of the section.","The atom table.","String data. This is simply just strings inlined without …","The flags for a section. These currently just apply to …","","This section has no flags.","This section’s data is readable.","This section’s data is writable.","This section’s data is executable.","This section’s data lives for the entirety of the …","[<code>Self::READ</code>] | [<code>Self::EXEC</code>]","[<code>Self::READ</code>] | [<code>Self::WRITE</code>]","[<code>Self::READ</code>] | [<code>Self::STATIC</code>]","Returns an empty set of flags","Returns the set containing all flags.","Returns the raw value of the flags currently stored.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Inserts the specified flags in-place.","Removes the specified flags in-place.","Toggles the specified flags in-place.","Inserts or removes the specified flags depending on the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the complement of this set of flags.","Returns the intersection between the two sets of flags.","Returns the union of the two sets of flags.","Returns the left flags, but with all the right flags …","Disables all flags disabled in the set.","Adds the set of flags.","Toggles the set of flags.","","","","","","","","","",""],"i":[0,0,1,1,1,1,1,1,0,0,0,2,2,2,0,0,3,3,0,4,4,0,5,5,0,0,6,6,6,6,6,6,6,6,0,7,7,7,7,0,8,8,8,0,0,0,0,9,9,9,9,0,10,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,9,9,9,9,9,9,9,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,4,4,2,2,2,2,11,2,3,11,1,2,11,9,10,11,11,11,2,3,4,5,9,10,11,11,11,11,11,11,11,11,11,11,11,9,10,11,11,11,11,11,9,10],"f":[null,null,null,[[]],[[["vec",3]],[["usize",15],["vec",3]]],[[],["usize",15]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],null,null,null,null,[[]],[[["str",15]],["moduleentry",3]],null,null,null,[[["string",3]]],null,null,[[["usize",15]]],null,null,[[["usize",15]]],null,null,null,null,[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],null,[[],["bool",15]],[[],["option",4]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["sectionflags",3]],[[],["sectionflags",3]],[[],["u64",15]],[[["u64",15]],[["option",4],["sectionflags",3]]],[[["u64",15]],["sectionflags",3]],[[["u64",15]],["sectionflags",3]],[[],["bool",15]],[[],["bool",15]],[[["sectionflags",3]],["bool",15]],[[["sectionflags",3]],["bool",15]],[[["sectionflags",3]]],[[["sectionflags",3]]],[[["sectionflags",3]]],[[["bool",15],["sectionflags",3]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["context",3],["modulebuilder",3]]],[[["usize",15]],[["option",4],["module",3]]],[[["usize",15]],["bool",15]],[[["usize",15]],["module",3]],[[["usize",15]],["modulebuilder",3]],[[["intoiterator",8]]],[[],["context",3]],[[],["module",3]],[[],["sectionflags",3]],[[]],[[]],[[["sectionflags",3]],["ordering",4]],[[["filetype",4]],["bool",15]],[[["sectiontype",4]],["bool",15]],[[["sectionflags",3]],["bool",15]],[[["sectionflags",3]],["bool",15]],[[["sectionflags",3]],[["option",4],["ordering",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["sectionflags",3]],["sectionflags",3]],[[["sectionflags",3]]],[[],["sectionflags",3]],[[["sectionflags",3]],["sectionflags",3]],[[["sectionflags",3]],["sectionflags",3]],[[["sectionflags",3]],["sectionflags",3]],[[["sectionflags",3]]],[[["sectionflags",3]]],[[["sectionflags",3]]],[[]],[[["u64",15]],[["tryfromprimitiveerror",3],["result",4]]],[[["u64",15]],[["tryfromprimitiveerror",3],["result",4]]],[[["intoiterator",8]],["sectionflags",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["tryfromprimitiveerror",3],["result",4]]],[[],[["tryfromprimitiveerror",3],["result",4]]]],"p":[[3,"Arena"],[3,"Context"],[3,"Module"],[3,"ModuleEntry"],[3,"ModuleBuilder"],[8,"Entry"],[8,"Parent"],[8,"Element"],[4,"FileType"],[4,"SectionType"],[3,"SectionFlags"]]}\
}');
initSearch(searchIndex);